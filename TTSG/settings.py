"""
Django settings for TTSG project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from os import getenv
from pathlib import Path

from celery.schedules import crontab
from dotenv import load_dotenv

load_dotenv(".env")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv("DEBUG", "False") == "True"
PROD = getenv("PROD", "False") == "True"

BASE_URL = getenv("BASE_URL", "http://localhost:8000")

ALLOWED_HOSTS = ["*"]
URL_CSRF = getenv("URL_CSRF", "")
CSRF_TRUSTED_ORIGINS = [URL_CSRF]




# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "facereco",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "TTSG.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "TTSG.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "fr-FR"

TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"


if PROD:
    STATIC_ROOT = BASE_DIR / "static"
else:
    STATICFILES_DIRS = (os.path.join(BASE_DIR, "static"),)

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email settings
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = getenv("EMAIL_HOST", "")
EMAIL_HOST_USER = getenv("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = getenv("EMAIL_HOST_PASSWORD", "")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = getenv("DEFAULT_FROM_EMAIL", "")
SERVER_EMAIL = getenv("SERVER_EMAIL", "")

# Celery settings
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 60 * 60
CELERY_BROKER_URL = getenv("CELERY_BROKER_URL", "amqp://localhost")
CELERY_RESULT_BACKEND = getenv("CELERY_RESULT_BACKEND", "rpc://")
CELERY_ACCEPT_CONTENT = ['pickle', 'json']
CELERY_TASK_SERIALIZER = "pickle"
CELERY_RESULT_SERIALIZER = "pickle"
CELERY_EVENT_SERIALIZER = "pickle"


# Face recognition settings
BASE_PATH_FOR_DIRECTORIES = getenv("BASE_PATH_FOR_DIRECTORIES", "C:\\Users\Lenovo X1\\Desktop\\Projet RÃ©zal Reconnnaissance faciale")
WITH_FACE_RECOGNITION = getenv("WITH_FACE_RECOGNITION", "False") == "True"

FACE_SEARCHING_BATCH_SIZE = int(getenv("FACE_SEARCHING_BATCH_SIZE", 20))
INDEXING_CHUNK_SIZE = int(getenv("INDEXING_CHUNK_SIZE", 30))
FACE_SEARCHING_CHUNK_SIZE = int(getenv("FACE_SEARCHING_CHUNK_SIZE", 30))
FACE_MATCHING_THRESHOLD = float(getenv("FACE_MATCHING_THRESHOLD", 0.5))
MIN_TIME_BETWEEN_DEMANDS = int(getenv("MIN_TIME_BETWEEN_DEMANDS", 10))
MAX_WAITING_TIME_BEFORE_SEARCH = int(getenv("MAX_WAITING_TIME_BEFORE_SEARCH", 20))

CELERY_BEAT_SCHEDULE = {
    "check_if_search_is_needed": {
        "task": "facereco.tasks.task_check_if_search_photos_needed",
        "schedule": crontab(minute="*/5"),
    },
}
